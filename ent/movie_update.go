// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"watchlist-app/ent/movie"
	"watchlist-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MovieUpdate is the builder for updating Movie entities.
type MovieUpdate struct {
	config
	hooks    []Hook
	mutation *MovieMutation
}

// Where appends a list predicates to the MovieUpdate builder.
func (_u *MovieUpdate) Where(ps ...predicate.Movie) *MovieUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *MovieUpdate) SetTitle(v string) *MovieUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableTitle(v *string) *MovieUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *MovieUpdate) SetDescription(v string) *MovieUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableDescription(v *string) *MovieUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *MovieUpdate) ClearDescription() *MovieUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetGenre sets the "genre" field.
func (_u *MovieUpdate) SetGenre(v string) *MovieUpdate {
	_u.mutation.SetGenre(v)
	return _u
}

// SetNillableGenre sets the "genre" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableGenre(v *string) *MovieUpdate {
	if v != nil {
		_u.SetGenre(*v)
	}
	return _u
}

// ClearGenre clears the value of the "genre" field.
func (_u *MovieUpdate) ClearGenre() *MovieUpdate {
	_u.mutation.ClearGenre()
	return _u
}

// SetReleaseYear sets the "release_year" field.
func (_u *MovieUpdate) SetReleaseYear(v int) *MovieUpdate {
	_u.mutation.ResetReleaseYear()
	_u.mutation.SetReleaseYear(v)
	return _u
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableReleaseYear(v *int) *MovieUpdate {
	if v != nil {
		_u.SetReleaseYear(*v)
	}
	return _u
}

// AddReleaseYear adds value to the "release_year" field.
func (_u *MovieUpdate) AddReleaseYear(v int) *MovieUpdate {
	_u.mutation.AddReleaseYear(v)
	return _u
}

// ClearReleaseYear clears the value of the "release_year" field.
func (_u *MovieUpdate) ClearReleaseYear() *MovieUpdate {
	_u.mutation.ClearReleaseYear()
	return _u
}

// SetPosterURL sets the "poster_url" field.
func (_u *MovieUpdate) SetPosterURL(v string) *MovieUpdate {
	_u.mutation.SetPosterURL(v)
	return _u
}

// SetNillablePosterURL sets the "poster_url" field if the given value is not nil.
func (_u *MovieUpdate) SetNillablePosterURL(v *string) *MovieUpdate {
	if v != nil {
		_u.SetPosterURL(*v)
	}
	return _u
}

// ClearPosterURL clears the value of the "poster_url" field.
func (_u *MovieUpdate) ClearPosterURL() *MovieUpdate {
	_u.mutation.ClearPosterURL()
	return _u
}

// SetMediaType sets the "media_type" field.
func (_u *MovieUpdate) SetMediaType(v movie.MediaType) *MovieUpdate {
	_u.mutation.SetMediaType(v)
	return _u
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableMediaType(v *movie.MediaType) *MovieUpdate {
	if v != nil {
		_u.SetMediaType(*v)
	}
	return _u
}

// SetWatchStatus sets the "watch_status" field.
func (_u *MovieUpdate) SetWatchStatus(v movie.WatchStatus) *MovieUpdate {
	_u.mutation.SetWatchStatus(v)
	return _u
}

// SetNillableWatchStatus sets the "watch_status" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableWatchStatus(v *movie.WatchStatus) *MovieUpdate {
	if v != nil {
		_u.SetWatchStatus(*v)
	}
	return _u
}

// SetRating sets the "rating" field.
func (_u *MovieUpdate) SetRating(v int) *MovieUpdate {
	_u.mutation.ResetRating()
	_u.mutation.SetRating(v)
	return _u
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableRating(v *int) *MovieUpdate {
	if v != nil {
		_u.SetRating(*v)
	}
	return _u
}

// AddRating adds value to the "rating" field.
func (_u *MovieUpdate) AddRating(v int) *MovieUpdate {
	_u.mutation.AddRating(v)
	return _u
}

// ClearRating clears the value of the "rating" field.
func (_u *MovieUpdate) ClearRating() *MovieUpdate {
	_u.mutation.ClearRating()
	return _u
}

// SetReview sets the "review" field.
func (_u *MovieUpdate) SetReview(v string) *MovieUpdate {
	_u.mutation.SetReview(v)
	return _u
}

// SetNillableReview sets the "review" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableReview(v *string) *MovieUpdate {
	if v != nil {
		_u.SetReview(*v)
	}
	return _u
}

// ClearReview clears the value of the "review" field.
func (_u *MovieUpdate) ClearReview() *MovieUpdate {
	_u.mutation.ClearReview()
	return _u
}

// SetWatchedAt sets the "watched_at" field.
func (_u *MovieUpdate) SetWatchedAt(v time.Time) *MovieUpdate {
	_u.mutation.SetWatchedAt(v)
	return _u
}

// SetNillableWatchedAt sets the "watched_at" field if the given value is not nil.
func (_u *MovieUpdate) SetNillableWatchedAt(v *time.Time) *MovieUpdate {
	if v != nil {
		_u.SetWatchedAt(*v)
	}
	return _u
}

// ClearWatchedAt clears the value of the "watched_at" field.
func (_u *MovieUpdate) ClearWatchedAt() *MovieUpdate {
	_u.mutation.ClearWatchedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MovieUpdate) SetUpdatedAt(v time.Time) *MovieUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the MovieMutation object of the builder.
func (_u *MovieUpdate) Mutation() *MovieMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *MovieUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MovieUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *MovieUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MovieUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MovieUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := movie.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MovieUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := movie.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Movie.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MediaType(); ok {
		if err := movie.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "media_type", err: fmt.Errorf(`ent: validator failed for field "Movie.media_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.WatchStatus(); ok {
		if err := movie.WatchStatusValidator(v); err != nil {
			return &ValidationError{Name: "watch_status", err: fmt.Errorf(`ent: validator failed for field "Movie.watch_status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Rating(); ok {
		if err := movie.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Movie.rating": %w`, err)}
		}
	}
	return nil
}

func (_u *MovieUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(movie.Table, movie.Columns, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(movie.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(movie.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Genre(); ok {
		_spec.SetField(movie.FieldGenre, field.TypeString, value)
	}
	if _u.mutation.GenreCleared() {
		_spec.ClearField(movie.FieldGenre, field.TypeString)
	}
	if value, ok := _u.mutation.ReleaseYear(); ok {
		_spec.SetField(movie.FieldReleaseYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedReleaseYear(); ok {
		_spec.AddField(movie.FieldReleaseYear, field.TypeInt, value)
	}
	if _u.mutation.ReleaseYearCleared() {
		_spec.ClearField(movie.FieldReleaseYear, field.TypeInt)
	}
	if value, ok := _u.mutation.PosterURL(); ok {
		_spec.SetField(movie.FieldPosterURL, field.TypeString, value)
	}
	if _u.mutation.PosterURLCleared() {
		_spec.ClearField(movie.FieldPosterURL, field.TypeString)
	}
	if value, ok := _u.mutation.MediaType(); ok {
		_spec.SetField(movie.FieldMediaType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.WatchStatus(); ok {
		_spec.SetField(movie.FieldWatchStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Rating(); ok {
		_spec.SetField(movie.FieldRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRating(); ok {
		_spec.AddField(movie.FieldRating, field.TypeInt, value)
	}
	if _u.mutation.RatingCleared() {
		_spec.ClearField(movie.FieldRating, field.TypeInt)
	}
	if value, ok := _u.mutation.Review(); ok {
		_spec.SetField(movie.FieldReview, field.TypeString, value)
	}
	if _u.mutation.ReviewCleared() {
		_spec.ClearField(movie.FieldReview, field.TypeString)
	}
	if value, ok := _u.mutation.WatchedAt(); ok {
		_spec.SetField(movie.FieldWatchedAt, field.TypeTime, value)
	}
	if _u.mutation.WatchedAtCleared() {
		_spec.ClearField(movie.FieldWatchedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(movie.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// MovieUpdateOne is the builder for updating a single Movie entity.
type MovieUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MovieMutation
}

// SetTitle sets the "title" field.
func (_u *MovieUpdateOne) SetTitle(v string) *MovieUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableTitle(v *string) *MovieUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *MovieUpdateOne) SetDescription(v string) *MovieUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableDescription(v *string) *MovieUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *MovieUpdateOne) ClearDescription() *MovieUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetGenre sets the "genre" field.
func (_u *MovieUpdateOne) SetGenre(v string) *MovieUpdateOne {
	_u.mutation.SetGenre(v)
	return _u
}

// SetNillableGenre sets the "genre" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableGenre(v *string) *MovieUpdateOne {
	if v != nil {
		_u.SetGenre(*v)
	}
	return _u
}

// ClearGenre clears the value of the "genre" field.
func (_u *MovieUpdateOne) ClearGenre() *MovieUpdateOne {
	_u.mutation.ClearGenre()
	return _u
}

// SetReleaseYear sets the "release_year" field.
func (_u *MovieUpdateOne) SetReleaseYear(v int) *MovieUpdateOne {
	_u.mutation.ResetReleaseYear()
	_u.mutation.SetReleaseYear(v)
	return _u
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableReleaseYear(v *int) *MovieUpdateOne {
	if v != nil {
		_u.SetReleaseYear(*v)
	}
	return _u
}

// AddReleaseYear adds value to the "release_year" field.
func (_u *MovieUpdateOne) AddReleaseYear(v int) *MovieUpdateOne {
	_u.mutation.AddReleaseYear(v)
	return _u
}

// ClearReleaseYear clears the value of the "release_year" field.
func (_u *MovieUpdateOne) ClearReleaseYear() *MovieUpdateOne {
	_u.mutation.ClearReleaseYear()
	return _u
}

// SetPosterURL sets the "poster_url" field.
func (_u *MovieUpdateOne) SetPosterURL(v string) *MovieUpdateOne {
	_u.mutation.SetPosterURL(v)
	return _u
}

// SetNillablePosterURL sets the "poster_url" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillablePosterURL(v *string) *MovieUpdateOne {
	if v != nil {
		_u.SetPosterURL(*v)
	}
	return _u
}

// ClearPosterURL clears the value of the "poster_url" field.
func (_u *MovieUpdateOne) ClearPosterURL() *MovieUpdateOne {
	_u.mutation.ClearPosterURL()
	return _u
}

// SetMediaType sets the "media_type" field.
func (_u *MovieUpdateOne) SetMediaType(v movie.MediaType) *MovieUpdateOne {
	_u.mutation.SetMediaType(v)
	return _u
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableMediaType(v *movie.MediaType) *MovieUpdateOne {
	if v != nil {
		_u.SetMediaType(*v)
	}
	return _u
}

// SetWatchStatus sets the "watch_status" field.
func (_u *MovieUpdateOne) SetWatchStatus(v movie.WatchStatus) *MovieUpdateOne {
	_u.mutation.SetWatchStatus(v)
	return _u
}

// SetNillableWatchStatus sets the "watch_status" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableWatchStatus(v *movie.WatchStatus) *MovieUpdateOne {
	if v != nil {
		_u.SetWatchStatus(*v)
	}
	return _u
}

// SetRating sets the "rating" field.
func (_u *MovieUpdateOne) SetRating(v int) *MovieUpdateOne {
	_u.mutation.ResetRating()
	_u.mutation.SetRating(v)
	return _u
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableRating(v *int) *MovieUpdateOne {
	if v != nil {
		_u.SetRating(*v)
	}
	return _u
}

// AddRating adds value to the "rating" field.
func (_u *MovieUpdateOne) AddRating(v int) *MovieUpdateOne {
	_u.mutation.AddRating(v)
	return _u
}

// ClearRating clears the value of the "rating" field.
func (_u *MovieUpdateOne) ClearRating() *MovieUpdateOne {
	_u.mutation.ClearRating()
	return _u
}

// SetReview sets the "review" field.
func (_u *MovieUpdateOne) SetReview(v string) *MovieUpdateOne {
	_u.mutation.SetReview(v)
	return _u
}

// SetNillableReview sets the "review" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableReview(v *string) *MovieUpdateOne {
	if v != nil {
		_u.SetReview(*v)
	}
	return _u
}

// ClearReview clears the value of the "review" field.
func (_u *MovieUpdateOne) ClearReview() *MovieUpdateOne {
	_u.mutation.ClearReview()
	return _u
}

// SetWatchedAt sets the "watched_at" field.
func (_u *MovieUpdateOne) SetWatchedAt(v time.Time) *MovieUpdateOne {
	_u.mutation.SetWatchedAt(v)
	return _u
}

// SetNillableWatchedAt sets the "watched_at" field if the given value is not nil.
func (_u *MovieUpdateOne) SetNillableWatchedAt(v *time.Time) *MovieUpdateOne {
	if v != nil {
		_u.SetWatchedAt(*v)
	}
	return _u
}

// ClearWatchedAt clears the value of the "watched_at" field.
func (_u *MovieUpdateOne) ClearWatchedAt() *MovieUpdateOne {
	_u.mutation.ClearWatchedAt()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *MovieUpdateOne) SetUpdatedAt(v time.Time) *MovieUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the MovieMutation object of the builder.
func (_u *MovieUpdateOne) Mutation() *MovieMutation {
	return _u.mutation
}

// Where appends a list predicates to the MovieUpdate builder.
func (_u *MovieUpdateOne) Where(ps ...predicate.Movie) *MovieUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *MovieUpdateOne) Select(field string, fields ...string) *MovieUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Movie entity.
func (_u *MovieUpdateOne) Save(ctx context.Context) (*Movie, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *MovieUpdateOne) SaveX(ctx context.Context) *Movie {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *MovieUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *MovieUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *MovieUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := movie.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *MovieUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := movie.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Movie.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MediaType(); ok {
		if err := movie.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "media_type", err: fmt.Errorf(`ent: validator failed for field "Movie.media_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.WatchStatus(); ok {
		if err := movie.WatchStatusValidator(v); err != nil {
			return &ValidationError{Name: "watch_status", err: fmt.Errorf(`ent: validator failed for field "Movie.watch_status": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Rating(); ok {
		if err := movie.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Movie.rating": %w`, err)}
		}
	}
	return nil
}

func (_u *MovieUpdateOne) sqlSave(ctx context.Context) (_node *Movie, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(movie.Table, movie.Columns, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Movie.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, movie.FieldID)
		for _, f := range fields {
			if !movie.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != movie.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(movie.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(movie.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Genre(); ok {
		_spec.SetField(movie.FieldGenre, field.TypeString, value)
	}
	if _u.mutation.GenreCleared() {
		_spec.ClearField(movie.FieldGenre, field.TypeString)
	}
	if value, ok := _u.mutation.ReleaseYear(); ok {
		_spec.SetField(movie.FieldReleaseYear, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedReleaseYear(); ok {
		_spec.AddField(movie.FieldReleaseYear, field.TypeInt, value)
	}
	if _u.mutation.ReleaseYearCleared() {
		_spec.ClearField(movie.FieldReleaseYear, field.TypeInt)
	}
	if value, ok := _u.mutation.PosterURL(); ok {
		_spec.SetField(movie.FieldPosterURL, field.TypeString, value)
	}
	if _u.mutation.PosterURLCleared() {
		_spec.ClearField(movie.FieldPosterURL, field.TypeString)
	}
	if value, ok := _u.mutation.MediaType(); ok {
		_spec.SetField(movie.FieldMediaType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.WatchStatus(); ok {
		_spec.SetField(movie.FieldWatchStatus, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Rating(); ok {
		_spec.SetField(movie.FieldRating, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRating(); ok {
		_spec.AddField(movie.FieldRating, field.TypeInt, value)
	}
	if _u.mutation.RatingCleared() {
		_spec.ClearField(movie.FieldRating, field.TypeInt)
	}
	if value, ok := _u.mutation.Review(); ok {
		_spec.SetField(movie.FieldReview, field.TypeString, value)
	}
	if _u.mutation.ReviewCleared() {
		_spec.ClearField(movie.FieldReview, field.TypeString)
	}
	if value, ok := _u.mutation.WatchedAt(); ok {
		_spec.SetField(movie.FieldWatchedAt, field.TypeTime, value)
	}
	if _u.mutation.WatchedAtCleared() {
		_spec.ClearField(movie.FieldWatchedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(movie.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Movie{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{movie.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
