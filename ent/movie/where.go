// Code generated by ent, DO NOT EDIT.

package movie

import (
	"time"
	"watchlist-app/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldID, id))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldDescription, v))
}

// Genre applies equality check predicate on the "genre" field. It's identical to GenreEQ.
func Genre(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldGenre, v))
}

// ReleaseYear applies equality check predicate on the "release_year" field. It's identical to ReleaseYearEQ.
func ReleaseYear(v int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldReleaseYear, v))
}

// PosterURL applies equality check predicate on the "poster_url" field. It's identical to PosterURLEQ.
func PosterURL(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldPosterURL, v))
}

// Rating applies equality check predicate on the "rating" field. It's identical to RatingEQ.
func Rating(v int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldRating, v))
}

// Review applies equality check predicate on the "review" field. It's identical to ReviewEQ.
func Review(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldReview, v))
}

// WatchedAt applies equality check predicate on the "watched_at" field. It's identical to WatchedAtEQ.
func WatchedAt(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldWatchedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldUpdatedAt, v))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Movie {
	return predicate.Movie(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Movie {
	return predicate.Movie(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldDescription, v))
}

// GenreEQ applies the EQ predicate on the "genre" field.
func GenreEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldGenre, v))
}

// GenreNEQ applies the NEQ predicate on the "genre" field.
func GenreNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldGenre, v))
}

// GenreIn applies the In predicate on the "genre" field.
func GenreIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldGenre, vs...))
}

// GenreNotIn applies the NotIn predicate on the "genre" field.
func GenreNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldGenre, vs...))
}

// GenreGT applies the GT predicate on the "genre" field.
func GenreGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldGenre, v))
}

// GenreGTE applies the GTE predicate on the "genre" field.
func GenreGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldGenre, v))
}

// GenreLT applies the LT predicate on the "genre" field.
func GenreLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldGenre, v))
}

// GenreLTE applies the LTE predicate on the "genre" field.
func GenreLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldGenre, v))
}

// GenreContains applies the Contains predicate on the "genre" field.
func GenreContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldGenre, v))
}

// GenreHasPrefix applies the HasPrefix predicate on the "genre" field.
func GenreHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldGenre, v))
}

// GenreHasSuffix applies the HasSuffix predicate on the "genre" field.
func GenreHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldGenre, v))
}

// GenreIsNil applies the IsNil predicate on the "genre" field.
func GenreIsNil() predicate.Movie {
	return predicate.Movie(sql.FieldIsNull(FieldGenre))
}

// GenreNotNil applies the NotNil predicate on the "genre" field.
func GenreNotNil() predicate.Movie {
	return predicate.Movie(sql.FieldNotNull(FieldGenre))
}

// GenreEqualFold applies the EqualFold predicate on the "genre" field.
func GenreEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldGenre, v))
}

// GenreContainsFold applies the ContainsFold predicate on the "genre" field.
func GenreContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldGenre, v))
}

// ReleaseYearEQ applies the EQ predicate on the "release_year" field.
func ReleaseYearEQ(v int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldReleaseYear, v))
}

// ReleaseYearNEQ applies the NEQ predicate on the "release_year" field.
func ReleaseYearNEQ(v int) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldReleaseYear, v))
}

// ReleaseYearIn applies the In predicate on the "release_year" field.
func ReleaseYearIn(vs ...int) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldReleaseYear, vs...))
}

// ReleaseYearNotIn applies the NotIn predicate on the "release_year" field.
func ReleaseYearNotIn(vs ...int) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldReleaseYear, vs...))
}

// ReleaseYearGT applies the GT predicate on the "release_year" field.
func ReleaseYearGT(v int) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldReleaseYear, v))
}

// ReleaseYearGTE applies the GTE predicate on the "release_year" field.
func ReleaseYearGTE(v int) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldReleaseYear, v))
}

// ReleaseYearLT applies the LT predicate on the "release_year" field.
func ReleaseYearLT(v int) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldReleaseYear, v))
}

// ReleaseYearLTE applies the LTE predicate on the "release_year" field.
func ReleaseYearLTE(v int) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldReleaseYear, v))
}

// ReleaseYearIsNil applies the IsNil predicate on the "release_year" field.
func ReleaseYearIsNil() predicate.Movie {
	return predicate.Movie(sql.FieldIsNull(FieldReleaseYear))
}

// ReleaseYearNotNil applies the NotNil predicate on the "release_year" field.
func ReleaseYearNotNil() predicate.Movie {
	return predicate.Movie(sql.FieldNotNull(FieldReleaseYear))
}

// PosterURLEQ applies the EQ predicate on the "poster_url" field.
func PosterURLEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldPosterURL, v))
}

// PosterURLNEQ applies the NEQ predicate on the "poster_url" field.
func PosterURLNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldPosterURL, v))
}

// PosterURLIn applies the In predicate on the "poster_url" field.
func PosterURLIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldPosterURL, vs...))
}

// PosterURLNotIn applies the NotIn predicate on the "poster_url" field.
func PosterURLNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldPosterURL, vs...))
}

// PosterURLGT applies the GT predicate on the "poster_url" field.
func PosterURLGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldPosterURL, v))
}

// PosterURLGTE applies the GTE predicate on the "poster_url" field.
func PosterURLGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldPosterURL, v))
}

// PosterURLLT applies the LT predicate on the "poster_url" field.
func PosterURLLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldPosterURL, v))
}

// PosterURLLTE applies the LTE predicate on the "poster_url" field.
func PosterURLLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldPosterURL, v))
}

// PosterURLContains applies the Contains predicate on the "poster_url" field.
func PosterURLContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldPosterURL, v))
}

// PosterURLHasPrefix applies the HasPrefix predicate on the "poster_url" field.
func PosterURLHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldPosterURL, v))
}

// PosterURLHasSuffix applies the HasSuffix predicate on the "poster_url" field.
func PosterURLHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldPosterURL, v))
}

// PosterURLIsNil applies the IsNil predicate on the "poster_url" field.
func PosterURLIsNil() predicate.Movie {
	return predicate.Movie(sql.FieldIsNull(FieldPosterURL))
}

// PosterURLNotNil applies the NotNil predicate on the "poster_url" field.
func PosterURLNotNil() predicate.Movie {
	return predicate.Movie(sql.FieldNotNull(FieldPosterURL))
}

// PosterURLEqualFold applies the EqualFold predicate on the "poster_url" field.
func PosterURLEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldPosterURL, v))
}

// PosterURLContainsFold applies the ContainsFold predicate on the "poster_url" field.
func PosterURLContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldPosterURL, v))
}

// MediaTypeEQ applies the EQ predicate on the "media_type" field.
func MediaTypeEQ(v MediaType) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldMediaType, v))
}

// MediaTypeNEQ applies the NEQ predicate on the "media_type" field.
func MediaTypeNEQ(v MediaType) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldMediaType, v))
}

// MediaTypeIn applies the In predicate on the "media_type" field.
func MediaTypeIn(vs ...MediaType) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldMediaType, vs...))
}

// MediaTypeNotIn applies the NotIn predicate on the "media_type" field.
func MediaTypeNotIn(vs ...MediaType) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldMediaType, vs...))
}

// WatchStatusEQ applies the EQ predicate on the "watch_status" field.
func WatchStatusEQ(v WatchStatus) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldWatchStatus, v))
}

// WatchStatusNEQ applies the NEQ predicate on the "watch_status" field.
func WatchStatusNEQ(v WatchStatus) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldWatchStatus, v))
}

// WatchStatusIn applies the In predicate on the "watch_status" field.
func WatchStatusIn(vs ...WatchStatus) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldWatchStatus, vs...))
}

// WatchStatusNotIn applies the NotIn predicate on the "watch_status" field.
func WatchStatusNotIn(vs ...WatchStatus) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldWatchStatus, vs...))
}

// RatingEQ applies the EQ predicate on the "rating" field.
func RatingEQ(v int) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldRating, v))
}

// RatingNEQ applies the NEQ predicate on the "rating" field.
func RatingNEQ(v int) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldRating, v))
}

// RatingIn applies the In predicate on the "rating" field.
func RatingIn(vs ...int) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldRating, vs...))
}

// RatingNotIn applies the NotIn predicate on the "rating" field.
func RatingNotIn(vs ...int) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldRating, vs...))
}

// RatingGT applies the GT predicate on the "rating" field.
func RatingGT(v int) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldRating, v))
}

// RatingGTE applies the GTE predicate on the "rating" field.
func RatingGTE(v int) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldRating, v))
}

// RatingLT applies the LT predicate on the "rating" field.
func RatingLT(v int) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldRating, v))
}

// RatingLTE applies the LTE predicate on the "rating" field.
func RatingLTE(v int) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldRating, v))
}

// RatingIsNil applies the IsNil predicate on the "rating" field.
func RatingIsNil() predicate.Movie {
	return predicate.Movie(sql.FieldIsNull(FieldRating))
}

// RatingNotNil applies the NotNil predicate on the "rating" field.
func RatingNotNil() predicate.Movie {
	return predicate.Movie(sql.FieldNotNull(FieldRating))
}

// ReviewEQ applies the EQ predicate on the "review" field.
func ReviewEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldReview, v))
}

// ReviewNEQ applies the NEQ predicate on the "review" field.
func ReviewNEQ(v string) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldReview, v))
}

// ReviewIn applies the In predicate on the "review" field.
func ReviewIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldReview, vs...))
}

// ReviewNotIn applies the NotIn predicate on the "review" field.
func ReviewNotIn(vs ...string) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldReview, vs...))
}

// ReviewGT applies the GT predicate on the "review" field.
func ReviewGT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldReview, v))
}

// ReviewGTE applies the GTE predicate on the "review" field.
func ReviewGTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldReview, v))
}

// ReviewLT applies the LT predicate on the "review" field.
func ReviewLT(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldReview, v))
}

// ReviewLTE applies the LTE predicate on the "review" field.
func ReviewLTE(v string) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldReview, v))
}

// ReviewContains applies the Contains predicate on the "review" field.
func ReviewContains(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContains(FieldReview, v))
}

// ReviewHasPrefix applies the HasPrefix predicate on the "review" field.
func ReviewHasPrefix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasPrefix(FieldReview, v))
}

// ReviewHasSuffix applies the HasSuffix predicate on the "review" field.
func ReviewHasSuffix(v string) predicate.Movie {
	return predicate.Movie(sql.FieldHasSuffix(FieldReview, v))
}

// ReviewIsNil applies the IsNil predicate on the "review" field.
func ReviewIsNil() predicate.Movie {
	return predicate.Movie(sql.FieldIsNull(FieldReview))
}

// ReviewNotNil applies the NotNil predicate on the "review" field.
func ReviewNotNil() predicate.Movie {
	return predicate.Movie(sql.FieldNotNull(FieldReview))
}

// ReviewEqualFold applies the EqualFold predicate on the "review" field.
func ReviewEqualFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldEqualFold(FieldReview, v))
}

// ReviewContainsFold applies the ContainsFold predicate on the "review" field.
func ReviewContainsFold(v string) predicate.Movie {
	return predicate.Movie(sql.FieldContainsFold(FieldReview, v))
}

// WatchedAtEQ applies the EQ predicate on the "watched_at" field.
func WatchedAtEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldWatchedAt, v))
}

// WatchedAtNEQ applies the NEQ predicate on the "watched_at" field.
func WatchedAtNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldWatchedAt, v))
}

// WatchedAtIn applies the In predicate on the "watched_at" field.
func WatchedAtIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldWatchedAt, vs...))
}

// WatchedAtNotIn applies the NotIn predicate on the "watched_at" field.
func WatchedAtNotIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldWatchedAt, vs...))
}

// WatchedAtGT applies the GT predicate on the "watched_at" field.
func WatchedAtGT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldWatchedAt, v))
}

// WatchedAtGTE applies the GTE predicate on the "watched_at" field.
func WatchedAtGTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldWatchedAt, v))
}

// WatchedAtLT applies the LT predicate on the "watched_at" field.
func WatchedAtLT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldWatchedAt, v))
}

// WatchedAtLTE applies the LTE predicate on the "watched_at" field.
func WatchedAtLTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldWatchedAt, v))
}

// WatchedAtIsNil applies the IsNil predicate on the "watched_at" field.
func WatchedAtIsNil() predicate.Movie {
	return predicate.Movie(sql.FieldIsNull(FieldWatchedAt))
}

// WatchedAtNotNil applies the NotNil predicate on the "watched_at" field.
func WatchedAtNotNil() predicate.Movie {
	return predicate.Movie(sql.FieldNotNull(FieldWatchedAt))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Movie {
	return predicate.Movie(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Movie) predicate.Movie {
	return predicate.Movie(sql.NotPredicates(p))
}
