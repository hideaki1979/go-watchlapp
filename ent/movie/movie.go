// Code generated by ent, DO NOT EDIT.

package movie

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the movie type in the database.
	Label = "movie"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldGenre holds the string denoting the genre field in the database.
	FieldGenre = "genre"
	// FieldReleaseYear holds the string denoting the release_year field in the database.
	FieldReleaseYear = "release_year"
	// FieldPosterURL holds the string denoting the poster_url field in the database.
	FieldPosterURL = "poster_url"
	// FieldMediaType holds the string denoting the media_type field in the database.
	FieldMediaType = "media_type"
	// FieldWatchStatus holds the string denoting the watch_status field in the database.
	FieldWatchStatus = "watch_status"
	// FieldRating holds the string denoting the rating field in the database.
	FieldRating = "rating"
	// FieldReview holds the string denoting the review field in the database.
	FieldReview = "review"
	// FieldWatchedAt holds the string denoting the watched_at field in the database.
	FieldWatchedAt = "watched_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// Table holds the table name of the movie in the database.
	Table = "movies"
)

// Columns holds all SQL columns for movie fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldDescription,
	FieldGenre,
	FieldReleaseYear,
	FieldPosterURL,
	FieldMediaType,
	FieldWatchStatus,
	FieldRating,
	FieldReview,
	FieldWatchedAt,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// RatingValidator is a validator for the "rating" field. It is called by the builders before save.
	RatingValidator func(int) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// MediaType defines the type for the "media_type" enum field.
type MediaType string

// MediaTypeMovie is the default value of the MediaType enum.
const DefaultMediaType = MediaTypeMovie

// MediaType values.
const (
	MediaTypeMovie       MediaType = "movie"
	MediaTypeTvSeries    MediaType = "tv_series"
	MediaTypeDocumentary MediaType = "documentary"
	MediaTypeAnime       MediaType = "anime"
)

func (mt MediaType) String() string {
	return string(mt)
}

// MediaTypeValidator is a validator for the "media_type" field enum values. It is called by the builders before save.
func MediaTypeValidator(mt MediaType) error {
	switch mt {
	case MediaTypeMovie, MediaTypeTvSeries, MediaTypeDocumentary, MediaTypeAnime:
		return nil
	default:
		return fmt.Errorf("movie: invalid enum value for media_type field: %q", mt)
	}
}

// WatchStatus defines the type for the "watch_status" enum field.
type WatchStatus string

// WatchStatusWantToWatch is the default value of the WatchStatus enum.
const DefaultWatchStatus = WatchStatusWantToWatch

// WatchStatus values.
const (
	WatchStatusWantToWatch WatchStatus = "want_to_watch"
	WatchStatusWatching    WatchStatus = "watching"
	WatchStatusCompleted   WatchStatus = "completed"
	WatchStatusDropped     WatchStatus = "dropped"
)

func (ws WatchStatus) String() string {
	return string(ws)
}

// WatchStatusValidator is a validator for the "watch_status" field enum values. It is called by the builders before save.
func WatchStatusValidator(ws WatchStatus) error {
	switch ws {
	case WatchStatusWantToWatch, WatchStatusWatching, WatchStatusCompleted, WatchStatusDropped:
		return nil
	default:
		return fmt.Errorf("movie: invalid enum value for watch_status field: %q", ws)
	}
}

// OrderOption defines the ordering options for the Movie queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTitle orders the results by the title field.
func ByTitle(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTitle, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByGenre orders the results by the genre field.
func ByGenre(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGenre, opts...).ToFunc()
}

// ByReleaseYear orders the results by the release_year field.
func ByReleaseYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseYear, opts...).ToFunc()
}

// ByPosterURL orders the results by the poster_url field.
func ByPosterURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPosterURL, opts...).ToFunc()
}

// ByMediaType orders the results by the media_type field.
func ByMediaType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMediaType, opts...).ToFunc()
}

// ByWatchStatus orders the results by the watch_status field.
func ByWatchStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWatchStatus, opts...).ToFunc()
}

// ByRating orders the results by the rating field.
func ByRating(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRating, opts...).ToFunc()
}

// ByReview orders the results by the review field.
func ByReview(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReview, opts...).ToFunc()
}

// ByWatchedAt orders the results by the watched_at field.
func ByWatchedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWatchedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}
