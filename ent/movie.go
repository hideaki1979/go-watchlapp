// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"
	"watchlist-app/ent/movie"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Movie is the model entity for the Movie schema.
type Movie struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// 映画・ドラマのタイトル
	Title string `json:"title,omitempty"`
	// 概要・あらすじ
	Description string `json:"description,omitempty"`
	// ジャンル
	Genre string `json:"genre,omitempty"`
	// 公開年
	ReleaseYear int `json:"release_year,omitempty"`
	// ポスター画像URL
	PosterURL string `json:"poster_url,omitempty"`
	// メディアタイプ
	MediaType movie.MediaType `json:"media_type,omitempty"`
	// 視聴ステータス
	WatchStatus movie.WatchStatus `json:"watch_status,omitempty"`
	// 評価（1-5）
	Rating int `json:"rating,omitempty"`
	// レビュー・感想
	Review string `json:"review,omitempty"`
	// 視聴完了日
	WatchedAt time.Time `json:"watched_at,omitempty"`
	// 作成日時
	CreatedAt time.Time `json:"created_at,omitempty"`
	// 更新日時
	UpdatedAt    time.Time `json:"updated_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Movie) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case movie.FieldID, movie.FieldReleaseYear, movie.FieldRating:
			values[i] = new(sql.NullInt64)
		case movie.FieldTitle, movie.FieldDescription, movie.FieldGenre, movie.FieldPosterURL, movie.FieldMediaType, movie.FieldWatchStatus, movie.FieldReview:
			values[i] = new(sql.NullString)
		case movie.FieldWatchedAt, movie.FieldCreatedAt, movie.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Movie fields.
func (_m *Movie) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case movie.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case movie.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				_m.Title = value.String
			}
		case movie.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case movie.FieldGenre:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field genre", values[i])
			} else if value.Valid {
				_m.Genre = value.String
			}
		case movie.FieldReleaseYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field release_year", values[i])
			} else if value.Valid {
				_m.ReleaseYear = int(value.Int64)
			}
		case movie.FieldPosterURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field poster_url", values[i])
			} else if value.Valid {
				_m.PosterURL = value.String
			}
		case movie.FieldMediaType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_type", values[i])
			} else if value.Valid {
				_m.MediaType = movie.MediaType(value.String)
			}
		case movie.FieldWatchStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field watch_status", values[i])
			} else if value.Valid {
				_m.WatchStatus = movie.WatchStatus(value.String)
			}
		case movie.FieldRating:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rating", values[i])
			} else if value.Valid {
				_m.Rating = int(value.Int64)
			}
		case movie.FieldReview:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field review", values[i])
			} else if value.Valid {
				_m.Review = value.String
			}
		case movie.FieldWatchedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field watched_at", values[i])
			} else if value.Valid {
				_m.WatchedAt = value.Time
			}
		case movie.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case movie.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Movie.
// This includes values selected through modifiers, order, etc.
func (_m *Movie) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this Movie.
// Note that you need to call Movie.Unwrap() before calling this method if this Movie
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *Movie) Update() *MovieUpdateOne {
	return NewMovieClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the Movie entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *Movie) Unwrap() *Movie {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Movie is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *Movie) String() string {
	var builder strings.Builder
	builder.WriteString("Movie(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("title=")
	builder.WriteString(_m.Title)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("genre=")
	builder.WriteString(_m.Genre)
	builder.WriteString(", ")
	builder.WriteString("release_year=")
	builder.WriteString(fmt.Sprintf("%v", _m.ReleaseYear))
	builder.WriteString(", ")
	builder.WriteString("poster_url=")
	builder.WriteString(_m.PosterURL)
	builder.WriteString(", ")
	builder.WriteString("media_type=")
	builder.WriteString(fmt.Sprintf("%v", _m.MediaType))
	builder.WriteString(", ")
	builder.WriteString("watch_status=")
	builder.WriteString(fmt.Sprintf("%v", _m.WatchStatus))
	builder.WriteString(", ")
	builder.WriteString("rating=")
	builder.WriteString(fmt.Sprintf("%v", _m.Rating))
	builder.WriteString(", ")
	builder.WriteString("review=")
	builder.WriteString(_m.Review)
	builder.WriteString(", ")
	builder.WriteString("watched_at=")
	builder.WriteString(_m.WatchedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Movies is a parsable slice of Movie.
type Movies []*Movie
