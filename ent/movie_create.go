// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"
	"watchlist-app/ent/movie"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MovieCreate is the builder for creating a Movie entity.
type MovieCreate struct {
	config
	mutation *MovieMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (_c *MovieCreate) SetTitle(v string) *MovieCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *MovieCreate) SetDescription(v string) *MovieCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *MovieCreate) SetNillableDescription(v *string) *MovieCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetGenre sets the "genre" field.
func (_c *MovieCreate) SetGenre(v string) *MovieCreate {
	_c.mutation.SetGenre(v)
	return _c
}

// SetNillableGenre sets the "genre" field if the given value is not nil.
func (_c *MovieCreate) SetNillableGenre(v *string) *MovieCreate {
	if v != nil {
		_c.SetGenre(*v)
	}
	return _c
}

// SetReleaseYear sets the "release_year" field.
func (_c *MovieCreate) SetReleaseYear(v int) *MovieCreate {
	_c.mutation.SetReleaseYear(v)
	return _c
}

// SetNillableReleaseYear sets the "release_year" field if the given value is not nil.
func (_c *MovieCreate) SetNillableReleaseYear(v *int) *MovieCreate {
	if v != nil {
		_c.SetReleaseYear(*v)
	}
	return _c
}

// SetPosterURL sets the "poster_url" field.
func (_c *MovieCreate) SetPosterURL(v string) *MovieCreate {
	_c.mutation.SetPosterURL(v)
	return _c
}

// SetNillablePosterURL sets the "poster_url" field if the given value is not nil.
func (_c *MovieCreate) SetNillablePosterURL(v *string) *MovieCreate {
	if v != nil {
		_c.SetPosterURL(*v)
	}
	return _c
}

// SetMediaType sets the "media_type" field.
func (_c *MovieCreate) SetMediaType(v movie.MediaType) *MovieCreate {
	_c.mutation.SetMediaType(v)
	return _c
}

// SetNillableMediaType sets the "media_type" field if the given value is not nil.
func (_c *MovieCreate) SetNillableMediaType(v *movie.MediaType) *MovieCreate {
	if v != nil {
		_c.SetMediaType(*v)
	}
	return _c
}

// SetWatchStatus sets the "watch_status" field.
func (_c *MovieCreate) SetWatchStatus(v movie.WatchStatus) *MovieCreate {
	_c.mutation.SetWatchStatus(v)
	return _c
}

// SetNillableWatchStatus sets the "watch_status" field if the given value is not nil.
func (_c *MovieCreate) SetNillableWatchStatus(v *movie.WatchStatus) *MovieCreate {
	if v != nil {
		_c.SetWatchStatus(*v)
	}
	return _c
}

// SetRating sets the "rating" field.
func (_c *MovieCreate) SetRating(v int) *MovieCreate {
	_c.mutation.SetRating(v)
	return _c
}

// SetNillableRating sets the "rating" field if the given value is not nil.
func (_c *MovieCreate) SetNillableRating(v *int) *MovieCreate {
	if v != nil {
		_c.SetRating(*v)
	}
	return _c
}

// SetReview sets the "review" field.
func (_c *MovieCreate) SetReview(v string) *MovieCreate {
	_c.mutation.SetReview(v)
	return _c
}

// SetNillableReview sets the "review" field if the given value is not nil.
func (_c *MovieCreate) SetNillableReview(v *string) *MovieCreate {
	if v != nil {
		_c.SetReview(*v)
	}
	return _c
}

// SetWatchedAt sets the "watched_at" field.
func (_c *MovieCreate) SetWatchedAt(v time.Time) *MovieCreate {
	_c.mutation.SetWatchedAt(v)
	return _c
}

// SetNillableWatchedAt sets the "watched_at" field if the given value is not nil.
func (_c *MovieCreate) SetNillableWatchedAt(v *time.Time) *MovieCreate {
	if v != nil {
		_c.SetWatchedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *MovieCreate) SetCreatedAt(v time.Time) *MovieCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *MovieCreate) SetNillableCreatedAt(v *time.Time) *MovieCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *MovieCreate) SetUpdatedAt(v time.Time) *MovieCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *MovieCreate) SetNillableUpdatedAt(v *time.Time) *MovieCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// Mutation returns the MovieMutation object of the builder.
func (_c *MovieCreate) Mutation() *MovieMutation {
	return _c.mutation
}

// Save creates the Movie in the database.
func (_c *MovieCreate) Save(ctx context.Context) (*Movie, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *MovieCreate) SaveX(ctx context.Context) *Movie {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MovieCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MovieCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *MovieCreate) defaults() {
	if _, ok := _c.mutation.MediaType(); !ok {
		v := movie.DefaultMediaType
		_c.mutation.SetMediaType(v)
	}
	if _, ok := _c.mutation.WatchStatus(); !ok {
		v := movie.DefaultWatchStatus
		_c.mutation.SetWatchStatus(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := movie.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := movie.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *MovieCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Movie.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := movie.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Movie.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.MediaType(); !ok {
		return &ValidationError{Name: "media_type", err: errors.New(`ent: missing required field "Movie.media_type"`)}
	}
	if v, ok := _c.mutation.MediaType(); ok {
		if err := movie.MediaTypeValidator(v); err != nil {
			return &ValidationError{Name: "media_type", err: fmt.Errorf(`ent: validator failed for field "Movie.media_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.WatchStatus(); !ok {
		return &ValidationError{Name: "watch_status", err: errors.New(`ent: missing required field "Movie.watch_status"`)}
	}
	if v, ok := _c.mutation.WatchStatus(); ok {
		if err := movie.WatchStatusValidator(v); err != nil {
			return &ValidationError{Name: "watch_status", err: fmt.Errorf(`ent: validator failed for field "Movie.watch_status": %w`, err)}
		}
	}
	if v, ok := _c.mutation.Rating(); ok {
		if err := movie.RatingValidator(v); err != nil {
			return &ValidationError{Name: "rating", err: fmt.Errorf(`ent: validator failed for field "Movie.rating": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Movie.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Movie.updated_at"`)}
	}
	return nil
}

func (_c *MovieCreate) sqlSave(ctx context.Context) (*Movie, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *MovieCreate) createSpec() (*Movie, *sqlgraph.CreateSpec) {
	var (
		_node = &Movie{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(movie.Table, sqlgraph.NewFieldSpec(movie.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(movie.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(movie.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Genre(); ok {
		_spec.SetField(movie.FieldGenre, field.TypeString, value)
		_node.Genre = value
	}
	if value, ok := _c.mutation.ReleaseYear(); ok {
		_spec.SetField(movie.FieldReleaseYear, field.TypeInt, value)
		_node.ReleaseYear = value
	}
	if value, ok := _c.mutation.PosterURL(); ok {
		_spec.SetField(movie.FieldPosterURL, field.TypeString, value)
		_node.PosterURL = value
	}
	if value, ok := _c.mutation.MediaType(); ok {
		_spec.SetField(movie.FieldMediaType, field.TypeEnum, value)
		_node.MediaType = value
	}
	if value, ok := _c.mutation.WatchStatus(); ok {
		_spec.SetField(movie.FieldWatchStatus, field.TypeEnum, value)
		_node.WatchStatus = value
	}
	if value, ok := _c.mutation.Rating(); ok {
		_spec.SetField(movie.FieldRating, field.TypeInt, value)
		_node.Rating = value
	}
	if value, ok := _c.mutation.Review(); ok {
		_spec.SetField(movie.FieldReview, field.TypeString, value)
		_node.Review = value
	}
	if value, ok := _c.mutation.WatchedAt(); ok {
		_spec.SetField(movie.FieldWatchedAt, field.TypeTime, value)
		_node.WatchedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(movie.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(movie.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// MovieCreateBulk is the builder for creating many Movie entities in bulk.
type MovieCreateBulk struct {
	config
	err      error
	builders []*MovieCreate
}

// Save creates the Movie entities in the database.
func (_c *MovieCreateBulk) Save(ctx context.Context) ([]*Movie, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Movie, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MovieMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *MovieCreateBulk) SaveX(ctx context.Context) []*Movie {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *MovieCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *MovieCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
