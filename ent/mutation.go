// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"
	"watchlist-app/ent/movie"
	"watchlist-app/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeMovie = "Movie"
)

// MovieMutation represents an operation that mutates the Movie nodes in the graph.
type MovieMutation struct {
	config
	op              Op
	typ             string
	id              *int
	title           *string
	description     *string
	genre           *string
	release_year    *int
	addrelease_year *int
	poster_url      *string
	media_type      *movie.MediaType
	watch_status    *movie.WatchStatus
	rating          *int
	addrating       *int
	review          *string
	watched_at      *time.Time
	created_at      *time.Time
	updated_at      *time.Time
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Movie, error)
	predicates      []predicate.Movie
}

var _ ent.Mutation = (*MovieMutation)(nil)

// movieOption allows management of the mutation configuration using functional options.
type movieOption func(*MovieMutation)

// newMovieMutation creates new mutation for the Movie entity.
func newMovieMutation(c config, op Op, opts ...movieOption) *MovieMutation {
	m := &MovieMutation{
		config:        c,
		op:            op,
		typ:           TypeMovie,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withMovieID sets the ID field of the mutation.
func withMovieID(id int) movieOption {
	return func(m *MovieMutation) {
		var (
			err   error
			once  sync.Once
			value *Movie
		)
		m.oldValue = func(ctx context.Context) (*Movie, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Movie.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withMovie sets the old Movie of the mutation.
func withMovie(node *Movie) movieOption {
	return func(m *MovieMutation) {
		m.oldValue = func(context.Context) (*Movie, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MovieMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MovieMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *MovieMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *MovieMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Movie.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetTitle sets the "title" field.
func (m *MovieMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *MovieMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *MovieMutation) ResetTitle() {
	m.title = nil
}

// SetDescription sets the "description" field.
func (m *MovieMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *MovieMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *MovieMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[movie.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *MovieMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[movie.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *MovieMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, movie.FieldDescription)
}

// SetGenre sets the "genre" field.
func (m *MovieMutation) SetGenre(s string) {
	m.genre = &s
}

// Genre returns the value of the "genre" field in the mutation.
func (m *MovieMutation) Genre() (r string, exists bool) {
	v := m.genre
	if v == nil {
		return
	}
	return *v, true
}

// OldGenre returns the old "genre" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldGenre(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGenre is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGenre requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenre: %w", err)
	}
	return oldValue.Genre, nil
}

// ClearGenre clears the value of the "genre" field.
func (m *MovieMutation) ClearGenre() {
	m.genre = nil
	m.clearedFields[movie.FieldGenre] = struct{}{}
}

// GenreCleared returns if the "genre" field was cleared in this mutation.
func (m *MovieMutation) GenreCleared() bool {
	_, ok := m.clearedFields[movie.FieldGenre]
	return ok
}

// ResetGenre resets all changes to the "genre" field.
func (m *MovieMutation) ResetGenre() {
	m.genre = nil
	delete(m.clearedFields, movie.FieldGenre)
}

// SetReleaseYear sets the "release_year" field.
func (m *MovieMutation) SetReleaseYear(i int) {
	m.release_year = &i
	m.addrelease_year = nil
}

// ReleaseYear returns the value of the "release_year" field in the mutation.
func (m *MovieMutation) ReleaseYear() (r int, exists bool) {
	v := m.release_year
	if v == nil {
		return
	}
	return *v, true
}

// OldReleaseYear returns the old "release_year" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldReleaseYear(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReleaseYear is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReleaseYear requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReleaseYear: %w", err)
	}
	return oldValue.ReleaseYear, nil
}

// AddReleaseYear adds i to the "release_year" field.
func (m *MovieMutation) AddReleaseYear(i int) {
	if m.addrelease_year != nil {
		*m.addrelease_year += i
	} else {
		m.addrelease_year = &i
	}
}

// AddedReleaseYear returns the value that was added to the "release_year" field in this mutation.
func (m *MovieMutation) AddedReleaseYear() (r int, exists bool) {
	v := m.addrelease_year
	if v == nil {
		return
	}
	return *v, true
}

// ClearReleaseYear clears the value of the "release_year" field.
func (m *MovieMutation) ClearReleaseYear() {
	m.release_year = nil
	m.addrelease_year = nil
	m.clearedFields[movie.FieldReleaseYear] = struct{}{}
}

// ReleaseYearCleared returns if the "release_year" field was cleared in this mutation.
func (m *MovieMutation) ReleaseYearCleared() bool {
	_, ok := m.clearedFields[movie.FieldReleaseYear]
	return ok
}

// ResetReleaseYear resets all changes to the "release_year" field.
func (m *MovieMutation) ResetReleaseYear() {
	m.release_year = nil
	m.addrelease_year = nil
	delete(m.clearedFields, movie.FieldReleaseYear)
}

// SetPosterURL sets the "poster_url" field.
func (m *MovieMutation) SetPosterURL(s string) {
	m.poster_url = &s
}

// PosterURL returns the value of the "poster_url" field in the mutation.
func (m *MovieMutation) PosterURL() (r string, exists bool) {
	v := m.poster_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPosterURL returns the old "poster_url" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldPosterURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPosterURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPosterURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPosterURL: %w", err)
	}
	return oldValue.PosterURL, nil
}

// ClearPosterURL clears the value of the "poster_url" field.
func (m *MovieMutation) ClearPosterURL() {
	m.poster_url = nil
	m.clearedFields[movie.FieldPosterURL] = struct{}{}
}

// PosterURLCleared returns if the "poster_url" field was cleared in this mutation.
func (m *MovieMutation) PosterURLCleared() bool {
	_, ok := m.clearedFields[movie.FieldPosterURL]
	return ok
}

// ResetPosterURL resets all changes to the "poster_url" field.
func (m *MovieMutation) ResetPosterURL() {
	m.poster_url = nil
	delete(m.clearedFields, movie.FieldPosterURL)
}

// SetMediaType sets the "media_type" field.
func (m *MovieMutation) SetMediaType(mt movie.MediaType) {
	m.media_type = &mt
}

// MediaType returns the value of the "media_type" field in the mutation.
func (m *MovieMutation) MediaType() (r movie.MediaType, exists bool) {
	v := m.media_type
	if v == nil {
		return
	}
	return *v, true
}

// OldMediaType returns the old "media_type" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldMediaType(ctx context.Context) (v movie.MediaType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMediaType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMediaType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMediaType: %w", err)
	}
	return oldValue.MediaType, nil
}

// ResetMediaType resets all changes to the "media_type" field.
func (m *MovieMutation) ResetMediaType() {
	m.media_type = nil
}

// SetWatchStatus sets the "watch_status" field.
func (m *MovieMutation) SetWatchStatus(ms movie.WatchStatus) {
	m.watch_status = &ms
}

// WatchStatus returns the value of the "watch_status" field in the mutation.
func (m *MovieMutation) WatchStatus() (r movie.WatchStatus, exists bool) {
	v := m.watch_status
	if v == nil {
		return
	}
	return *v, true
}

// OldWatchStatus returns the old "watch_status" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldWatchStatus(ctx context.Context) (v movie.WatchStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWatchStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWatchStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWatchStatus: %w", err)
	}
	return oldValue.WatchStatus, nil
}

// ResetWatchStatus resets all changes to the "watch_status" field.
func (m *MovieMutation) ResetWatchStatus() {
	m.watch_status = nil
}

// SetRating sets the "rating" field.
func (m *MovieMutation) SetRating(i int) {
	m.rating = &i
	m.addrating = nil
}

// Rating returns the value of the "rating" field in the mutation.
func (m *MovieMutation) Rating() (r int, exists bool) {
	v := m.rating
	if v == nil {
		return
	}
	return *v, true
}

// OldRating returns the old "rating" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldRating(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRating is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRating requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRating: %w", err)
	}
	return oldValue.Rating, nil
}

// AddRating adds i to the "rating" field.
func (m *MovieMutation) AddRating(i int) {
	if m.addrating != nil {
		*m.addrating += i
	} else {
		m.addrating = &i
	}
}

// AddedRating returns the value that was added to the "rating" field in this mutation.
func (m *MovieMutation) AddedRating() (r int, exists bool) {
	v := m.addrating
	if v == nil {
		return
	}
	return *v, true
}

// ClearRating clears the value of the "rating" field.
func (m *MovieMutation) ClearRating() {
	m.rating = nil
	m.addrating = nil
	m.clearedFields[movie.FieldRating] = struct{}{}
}

// RatingCleared returns if the "rating" field was cleared in this mutation.
func (m *MovieMutation) RatingCleared() bool {
	_, ok := m.clearedFields[movie.FieldRating]
	return ok
}

// ResetRating resets all changes to the "rating" field.
func (m *MovieMutation) ResetRating() {
	m.rating = nil
	m.addrating = nil
	delete(m.clearedFields, movie.FieldRating)
}

// SetReview sets the "review" field.
func (m *MovieMutation) SetReview(s string) {
	m.review = &s
}

// Review returns the value of the "review" field in the mutation.
func (m *MovieMutation) Review() (r string, exists bool) {
	v := m.review
	if v == nil {
		return
	}
	return *v, true
}

// OldReview returns the old "review" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldReview(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReview is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReview requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReview: %w", err)
	}
	return oldValue.Review, nil
}

// ClearReview clears the value of the "review" field.
func (m *MovieMutation) ClearReview() {
	m.review = nil
	m.clearedFields[movie.FieldReview] = struct{}{}
}

// ReviewCleared returns if the "review" field was cleared in this mutation.
func (m *MovieMutation) ReviewCleared() bool {
	_, ok := m.clearedFields[movie.FieldReview]
	return ok
}

// ResetReview resets all changes to the "review" field.
func (m *MovieMutation) ResetReview() {
	m.review = nil
	delete(m.clearedFields, movie.FieldReview)
}

// SetWatchedAt sets the "watched_at" field.
func (m *MovieMutation) SetWatchedAt(t time.Time) {
	m.watched_at = &t
}

// WatchedAt returns the value of the "watched_at" field in the mutation.
func (m *MovieMutation) WatchedAt() (r time.Time, exists bool) {
	v := m.watched_at
	if v == nil {
		return
	}
	return *v, true
}

// OldWatchedAt returns the old "watched_at" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldWatchedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWatchedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWatchedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWatchedAt: %w", err)
	}
	return oldValue.WatchedAt, nil
}

// ClearWatchedAt clears the value of the "watched_at" field.
func (m *MovieMutation) ClearWatchedAt() {
	m.watched_at = nil
	m.clearedFields[movie.FieldWatchedAt] = struct{}{}
}

// WatchedAtCleared returns if the "watched_at" field was cleared in this mutation.
func (m *MovieMutation) WatchedAtCleared() bool {
	_, ok := m.clearedFields[movie.FieldWatchedAt]
	return ok
}

// ResetWatchedAt resets all changes to the "watched_at" field.
func (m *MovieMutation) ResetWatchedAt() {
	m.watched_at = nil
	delete(m.clearedFields, movie.FieldWatchedAt)
}

// SetCreatedAt sets the "created_at" field.
func (m *MovieMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *MovieMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *MovieMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *MovieMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *MovieMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Movie entity.
// If the Movie object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *MovieMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *MovieMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// Where appends a list predicates to the MovieMutation builder.
func (m *MovieMutation) Where(ps ...predicate.Movie) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the MovieMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *MovieMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Movie, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *MovieMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *MovieMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Movie).
func (m *MovieMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *MovieMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.title != nil {
		fields = append(fields, movie.FieldTitle)
	}
	if m.description != nil {
		fields = append(fields, movie.FieldDescription)
	}
	if m.genre != nil {
		fields = append(fields, movie.FieldGenre)
	}
	if m.release_year != nil {
		fields = append(fields, movie.FieldReleaseYear)
	}
	if m.poster_url != nil {
		fields = append(fields, movie.FieldPosterURL)
	}
	if m.media_type != nil {
		fields = append(fields, movie.FieldMediaType)
	}
	if m.watch_status != nil {
		fields = append(fields, movie.FieldWatchStatus)
	}
	if m.rating != nil {
		fields = append(fields, movie.FieldRating)
	}
	if m.review != nil {
		fields = append(fields, movie.FieldReview)
	}
	if m.watched_at != nil {
		fields = append(fields, movie.FieldWatchedAt)
	}
	if m.created_at != nil {
		fields = append(fields, movie.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, movie.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *MovieMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldTitle:
		return m.Title()
	case movie.FieldDescription:
		return m.Description()
	case movie.FieldGenre:
		return m.Genre()
	case movie.FieldReleaseYear:
		return m.ReleaseYear()
	case movie.FieldPosterURL:
		return m.PosterURL()
	case movie.FieldMediaType:
		return m.MediaType()
	case movie.FieldWatchStatus:
		return m.WatchStatus()
	case movie.FieldRating:
		return m.Rating()
	case movie.FieldReview:
		return m.Review()
	case movie.FieldWatchedAt:
		return m.WatchedAt()
	case movie.FieldCreatedAt:
		return m.CreatedAt()
	case movie.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *MovieMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case movie.FieldTitle:
		return m.OldTitle(ctx)
	case movie.FieldDescription:
		return m.OldDescription(ctx)
	case movie.FieldGenre:
		return m.OldGenre(ctx)
	case movie.FieldReleaseYear:
		return m.OldReleaseYear(ctx)
	case movie.FieldPosterURL:
		return m.OldPosterURL(ctx)
	case movie.FieldMediaType:
		return m.OldMediaType(ctx)
	case movie.FieldWatchStatus:
		return m.OldWatchStatus(ctx)
	case movie.FieldRating:
		return m.OldRating(ctx)
	case movie.FieldReview:
		return m.OldReview(ctx)
	case movie.FieldWatchedAt:
		return m.OldWatchedAt(ctx)
	case movie.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case movie.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Movie field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) SetField(name string, value ent.Value) error {
	switch name {
	case movie.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case movie.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case movie.FieldGenre:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenre(v)
		return nil
	case movie.FieldReleaseYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReleaseYear(v)
		return nil
	case movie.FieldPosterURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPosterURL(v)
		return nil
	case movie.FieldMediaType:
		v, ok := value.(movie.MediaType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMediaType(v)
		return nil
	case movie.FieldWatchStatus:
		v, ok := value.(movie.WatchStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWatchStatus(v)
		return nil
	case movie.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRating(v)
		return nil
	case movie.FieldReview:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReview(v)
		return nil
	case movie.FieldWatchedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWatchedAt(v)
		return nil
	case movie.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case movie.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *MovieMutation) AddedFields() []string {
	var fields []string
	if m.addrelease_year != nil {
		fields = append(fields, movie.FieldReleaseYear)
	}
	if m.addrating != nil {
		fields = append(fields, movie.FieldRating)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *MovieMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case movie.FieldReleaseYear:
		return m.AddedReleaseYear()
	case movie.FieldRating:
		return m.AddedRating()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *MovieMutation) AddField(name string, value ent.Value) error {
	switch name {
	case movie.FieldReleaseYear:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddReleaseYear(v)
		return nil
	case movie.FieldRating:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddRating(v)
		return nil
	}
	return fmt.Errorf("unknown Movie numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *MovieMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(movie.FieldDescription) {
		fields = append(fields, movie.FieldDescription)
	}
	if m.FieldCleared(movie.FieldGenre) {
		fields = append(fields, movie.FieldGenre)
	}
	if m.FieldCleared(movie.FieldReleaseYear) {
		fields = append(fields, movie.FieldReleaseYear)
	}
	if m.FieldCleared(movie.FieldPosterURL) {
		fields = append(fields, movie.FieldPosterURL)
	}
	if m.FieldCleared(movie.FieldRating) {
		fields = append(fields, movie.FieldRating)
	}
	if m.FieldCleared(movie.FieldReview) {
		fields = append(fields, movie.FieldReview)
	}
	if m.FieldCleared(movie.FieldWatchedAt) {
		fields = append(fields, movie.FieldWatchedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *MovieMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *MovieMutation) ClearField(name string) error {
	switch name {
	case movie.FieldDescription:
		m.ClearDescription()
		return nil
	case movie.FieldGenre:
		m.ClearGenre()
		return nil
	case movie.FieldReleaseYear:
		m.ClearReleaseYear()
		return nil
	case movie.FieldPosterURL:
		m.ClearPosterURL()
		return nil
	case movie.FieldRating:
		m.ClearRating()
		return nil
	case movie.FieldReview:
		m.ClearReview()
		return nil
	case movie.FieldWatchedAt:
		m.ClearWatchedAt()
		return nil
	}
	return fmt.Errorf("unknown Movie nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *MovieMutation) ResetField(name string) error {
	switch name {
	case movie.FieldTitle:
		m.ResetTitle()
		return nil
	case movie.FieldDescription:
		m.ResetDescription()
		return nil
	case movie.FieldGenre:
		m.ResetGenre()
		return nil
	case movie.FieldReleaseYear:
		m.ResetReleaseYear()
		return nil
	case movie.FieldPosterURL:
		m.ResetPosterURL()
		return nil
	case movie.FieldMediaType:
		m.ResetMediaType()
		return nil
	case movie.FieldWatchStatus:
		m.ResetWatchStatus()
		return nil
	case movie.FieldRating:
		m.ResetRating()
		return nil
	case movie.FieldReview:
		m.ResetReview()
		return nil
	case movie.FieldWatchedAt:
		m.ResetWatchedAt()
		return nil
	case movie.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case movie.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Movie field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *MovieMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *MovieMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *MovieMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *MovieMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *MovieMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *MovieMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *MovieMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Movie unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *MovieMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Movie edge %s", name)
}
